package com.daijie.ksyllabusapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.daijie.ksyllabusapp.repository.lesson.ShareLessonRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHARE_LESSON_RECORD".
*/
public class ShareLessonRecordDao extends AbstractDao<ShareLessonRecord, Long> {

    public static final String TABLENAME = "SHARE_LESSON_RECORD";

    /**
     * Properties of entity ShareLessonRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Account = new Property(2, String.class, "account", false, "ACCOUNT");
        public final static Property SemesterYear = new Property(3, int.class, "semesterYear", false, "SEMESTER_YEAR");
        public final static Property SemesterSeason = new Property(4, int.class, "semesterSeason", false, "SEMESTER_SEASON");
        public final static Property LessonsJson = new Property(5, String.class, "lessonsJson", false, "LESSONS_JSON");
    }


    public ShareLessonRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ShareLessonRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHARE_LESSON_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"ACCOUNT\" TEXT," + // 2: account
                "\"SEMESTER_YEAR\" INTEGER NOT NULL ," + // 3: semesterYear
                "\"SEMESTER_SEASON\" INTEGER NOT NULL ," + // 4: semesterSeason
                "\"LESSONS_JSON\" TEXT);"); // 5: lessonsJson
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SHARE_LESSON_RECORD_ACCOUNT ON \"SHARE_LESSON_RECORD\"" +
                " (\"ACCOUNT\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SHARE_LESSON_RECORD_SEMESTER_YEAR ON \"SHARE_LESSON_RECORD\"" +
                " (\"SEMESTER_YEAR\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SHARE_LESSON_RECORD_SEMESTER_SEASON ON \"SHARE_LESSON_RECORD\"" +
                " (\"SEMESTER_SEASON\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHARE_LESSON_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShareLessonRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
        stmt.bindLong(4, entity.getSemesterYear());
        stmt.bindLong(5, entity.getSemesterSeason());
 
        String lessonsJson = entity.getLessonsJson();
        if (lessonsJson != null) {
            stmt.bindString(6, lessonsJson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShareLessonRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
        stmt.bindLong(4, entity.getSemesterYear());
        stmt.bindLong(5, entity.getSemesterSeason());
 
        String lessonsJson = entity.getLessonsJson();
        if (lessonsJson != null) {
            stmt.bindString(6, lessonsJson);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShareLessonRecord readEntity(Cursor cursor, int offset) {
        ShareLessonRecord entity = new ShareLessonRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // account
            cursor.getInt(offset + 3), // semesterYear
            cursor.getInt(offset + 4), // semesterSeason
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // lessonsJson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShareLessonRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSemesterYear(cursor.getInt(offset + 3));
        entity.setSemesterSeason(cursor.getInt(offset + 4));
        entity.setLessonsJson(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShareLessonRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShareLessonRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShareLessonRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
